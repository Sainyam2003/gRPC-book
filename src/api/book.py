from flask_restx import Namespace, Resource, fields
from sqlalchemy import false
from ..models import BookModel

api = Namespace("books", description="Books related operations")

book = api.model(
    "Book",
    {
        "id": fields.String(readonly=True, description="The identifier"),
        "name": fields.String(required=True, description="The book name"),
        "author": fields.String(required=True, description="The book author"),
        "pages": fields.String(required=False, description="Number of pages in book"),
        "created_at": fields.String(readonly=True, description="When the book was created, autogenerated"),
        "modified_at": fields.String(readonly=True, description="When the records was modified, autogenerated"),
    },
)



@api.route("/")
class BookList(Resource):
    @api.doc("list_books")
    @api.marshal_list_with(book)
    def get(self):
        """List all books"""
        return BookModel.get_all_books()
    
    @api.doc("create a book")
    @api.expect(book)
    @api.marshal_with(book, code=201)    
    def post(self):
        """Creates a book"""
        req_data = api.payload
        book = BookModel(req_data)
        book.save()
        return book

@api.route("/<int:id>")
@api.response(404, "Book not found")
@api.param("id","The book identifier")
class Book(Resource):
    """Show a single book and lets you edit/delete it."""
    @api.doc("get_book")
    @api.marshal_with(book)
    def get(self, id):
        return BookModel.query.get(id)

    @api.doc("delete_book")
    @api.response(204, "Book deleted.")
    def delete(self, id):
        book = BookModel.query.get(id)
        if book is not None:
            book.delete()
            return "Book deleted", 204
        else:
            return "Book not found", 404
    
    @api.doc("update_book")
    @api.response(200, "Updates the book.")
    @api.expect(book)
    @api.marshal_with(book)
    def put(self, id):
        book = BookModel.query.get(id)
        if book is not None:            
            req_data = api.payload            
            book.update(req_data)
            return book
        else:
            return "Book not found", 404
